from aiogram import F, Router
from aiogram.filters import Command,StateFilter
from aiogram.types import Message
from keyboards import main_kb, del_kb
from dictionary import dict_ru
from aiogram_calendar import SimpleCalendar,SimpleCalendarCallback 
from aiogram.types import CallbackQuery
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters.callback_data import CallbackData

rt = Router()

tasks = {}


class FSM_calendar(StatesGroup):
    select_date = State()
    write_task = State()
    select_date_for_del = State()
    select_task = State()





@rt.message(Command(commands = 'start'))
async def start_command(msg: Message):
    await msg.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {msg.chat.first_name}.\n'
                     '–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ—Ç –¥–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ'
                     '–Ω–µ —Ö–æ—Ç—è—Ç –µ–±–ª–∞–Ω–∏—Ç—å. –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π'
                     '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /help \n\n'
                     '1. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
                     '2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n'
                     '3. –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å',reply_markup = main_kb)

    

@rt.message(Command(commands = 'help'))
async def help_command(msg: Message):
    await msg.answer(text = '–¢–µ–±–µ —Ç—É—Ç –Ω–µ –ø–æ–º–æ–≥—É—Ç')


@rt.message(Command(commands = 'cancel'),~StateFilter(default_state))
async def cancel_command(msg:Message, state:FSMContext):
    await msg.answer(text = '–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏.' 
                     '–ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úçÔ∏è"\n'
                     '1. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
                     '2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n'
                     '3. –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', reply_markup = main_kb)
    await state.clear()


@rt.message((F.text == '‚úçÔ∏è'), StateFilter(default_state))
async def process_button_write_task(msg: Message, state: FSMContext):
    await msg.answer(text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏",reply_markup=await SimpleCalendar().start_calendar())
    await state.set_state(FSM_calendar.select_date)



@rt.callback_query(SimpleCalendarCallback.filter(),StateFilter(FSM_calendar.select_date))
async def process_simple_calendar(callback_query: CallbackQuery,callback_data: CallbackData, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query,callback_data)
    if selected:
           
        await state.update_data(sel_date = f'{date.strftime("%d.%m.%Y")}')
        await callback_query.message.answer(text = f'–î–∞—Ç–∞ {date} –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–¥–∞—á—É')
        await state.set_state(FSM_calendar.write_task)
        


@rt.message(StateFilter(FSM_calendar.select_date))
async def not_select(msg:Message):
    await msg.answer(text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel',reply_markup=await SimpleCalendar().start_calendar())


@rt.message(StateFilter(FSM_calendar.write_task))
async def process_write_task(msg:Message,state = FSMContext):
    
    data = await state.get_data()
    date = data['sel_date']

    if msg.from_user.id not in tasks:
        tasks[msg.from_user.id] = {}
    if date not in tasks[msg.from_user.id]:
        tasks[msg.from_user.id][date] = [msg.text]
    else:
        tasks[msg.from_user.id][date].append(msg.text)

    await msg.answer('–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–∫–æ—Ä–µ–π—à–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è!')
    await state.clear()
    await msg.answer(text = '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üëÄ"\n'
                     '1. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
                     '2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n'
                     '3. –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', reply_markup = main_kb) 
    

@rt.message(F.text == 'üîô')
async def back_button(msg:Message):
    await msg.answer(text = '1. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
                            '2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n'
                            '3. –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å',reply_markup=main_kb)


@rt.message((F.text == '‚ùå'),StateFilter(default_state))
async def delete_task(msg:Message,state:FSMContext):
    await msg.answer(text = '–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n'
                            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É',reply_markup = await SimpleCalendar().start_calendar())
    await state.set_state(FSM_calendar.select_date_for_del)
    

@rt.callback_query(SimpleCalendarCallback.filter(),StateFilter(FSM_calendar.select_date_for_del))
async def select_date_for_delete(callback_query: CallbackQuery,callback_data: CallbackData, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(callback_query,callback_data)
    if selected:
        if date.strftime("%d.%m.%Y") in tasks[callback_query.from_user.id]:
                await state.update_data(select_date = f'{date.strftime("%d.%m.%Y")}')
                await callback_query.message.answer(text = f'–î–∞—Ç–∞ {date} –≤—ã–±—Ä–∞–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
                await state.set_state(FSM_calendar.select_task)
        else:
            await callback_query.message.answer('–ù–∞ —ç—Ç—É –¥–∞—Ç—É –∑–∞–º–µ—Ç–æ–∫ –Ω–µ—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup = await SimpleCalendar().start_calendar())




@rt.message(F.text.isdigit(),StateFilter(FSM_calendar.select_task))
async def select_task_for_delete(msg:Message,state:FSMContext):
    data = await state.get_data()
    date = data['select_date']

    # for date, tasks_list in tasks[msg.from_user.id].items():
    #     for task in tasks_list:
    #         if msg.text in task:
    del tasks[msg.from_user.id][date][(int(msg.text)-1)]
    if len(tasks[msg.from_user.id][date])==0:
        del tasks[msg.from_user.id][date]
    await msg.answer('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.')
    await state.clear()
    await msg.answer(text = '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üëÄ"\n'
                     '1. –ó–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
                     '2. –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\n'
                     '3. –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', reply_markup = main_kb)


@rt.message(F.text,StateFilter(FSM_calendar.select_task))
async def not_select_number(msg:Message):
    await msg.answer(text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel')



@rt.message(F.text == 'üëÄ')
async def open_task(msg:Message):
        
    if msg.from_user.id not in tasks or len(tasks[msg.from_user.id])<1:
        await msg.answer(text = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á')
    else:
        response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for date, task_list in tasks[msg.from_user.id].items():     
            response += '\n'f'- {date}\n'
            response += '\n'.join([f'{(list(tasks[msg.from_user.id][date]).index(task))+1}) {task}' for task in task_list])
        await msg.answer(response)
        await msg.answer(text = dict_ru['buttons_del_active_task'],reply_markup = del_kb)



@rt.message(F.text == 'üóìÔ∏è')
async def open_calendar(msg: Message):
    await msg.answer(text = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏",reply_markup=await SimpleCalendar().start_calendar())
    await msg.answer(text = dict_ru['buttons_menu'],reply_markup = main_kb)

  
